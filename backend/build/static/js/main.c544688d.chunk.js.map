{"version":3,"sources":["services/contactService.js","components/contact.js","components/notification.js","App.js","reportWebVitals.js","index.js"],"names":["url","contact","axios","post","then","res","data","get","id","delete","updatedContact","put","ContactFilter","value","handleChange","onChange","ContactForm","props","name","number","handleNameChange","handleNumberChange","handleSubmit","onSubmit","type","ContactList","contacts","onDelete","map","c","onClick","NotificationType","Object","freeze","ERROR","SUCCESS","Notification","content","isShown","message","isError","style","background","color","borderColor","border","padding","App","useState","setContacts","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notification","setNotification","numberIsValid","length","clearInputs","showNotification","setTimeout","NOTIFICATION_DURATION_S","useEffect","contactService","fetchedContacts","concat","catch","console","error","filteredContacts","toLowerCase","includes","sort","c1","c2","attemptContactCreation","find","p","window","confirm","existingContact","e","response","alert","updateContactNumber","createdContact","event","target","preventDefault","contactId","contactToDelete","deleteContact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEMA,EAAM,eAsBG,EApBO,SAAAC,GAElB,OADYC,IAAMC,KAAKH,EAAKC,GACjBG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAkBhB,EAfK,WAEhB,OADYJ,IAAMK,IAAIP,GACXI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAahB,EAVO,SAAAE,GAElB,OADYN,IAAMO,OAAN,UAAgBT,EAAhB,YAAuBQ,IACxBJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAQhB,EALM,SAACE,EAAIE,GAEtB,OADYR,IAAMS,IAAN,UAAaX,EAAb,YAAoBQ,GAAME,GAC3BN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,S,OCrBlBM,EAAgB,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,aAClC,OACE,2CACU,uBAAOD,MAAOA,EAAOE,SAAUD,QAKlCE,EAAc,SAACC,GACxB,IAAMC,EAAOD,EAAMC,KACbC,EAASF,EAAME,OACfC,EAAmBH,EAAMG,iBACzBC,EAAqBJ,EAAMI,mBAC3BC,EAAeL,EAAMK,aAC3B,OACE,uBAAMC,SAAUD,EAAhB,UACE,yCACQ,uBAAOT,MAAOK,EAAMH,SAAUK,OAEtC,2CACU,uBAAOP,MAAOM,EAAQJ,SAAUM,OAE1C,8BACE,wBAAQG,KAAK,SAAb,uBAMGC,EAAc,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SACnC,OACE,8BACGD,EAASE,KAAI,SAAAC,GACZ,OACE,gCACE,iCAAOA,EAAEX,KAAT,IAAgBW,EAAEV,UAClB,wBAAQW,QAAS,kBAAMH,EAASE,EAAErB,KAAlC,sBAFQqB,EAAErB,UClCXuB,EAAmBC,OAAOC,OAAO,CAC1CC,MAAO,EACPC,QAAS,IAGAC,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpBC,EAAUD,EAAQC,QAClBd,EAAOa,EAAQb,KACfe,EAAUF,EAAQE,QAExB,IAAID,EAAS,OAAO,KAEpB,IAAME,EAAU,kBAAMhB,IAASO,EAAiBG,OAE1CO,EAAQ,CACZC,WAAYF,IAAY,OAAS,aACjCG,MAAOH,IAAY,MAAQ,QAC3BI,YAAaJ,IAAY,MAAQ,QACjCK,OAAQ,YACRC,QAAS,QAGX,OACE,qBAAKL,MAAOA,EAAZ,SACE,4BAAIF,OCuFGQ,EA1GH,WAAO,IAAD,EACiBC,mBAAS,IAD1B,mBACRtB,EADQ,KACEuB,EADF,OAEgBD,mBAAS,IAFzB,mBAERE,EAFQ,KAECC,EAFD,OAGoBH,mBAAS,IAH7B,mBAGRI,EAHQ,KAGGC,EAHH,OAIcL,mBAAS,IAJvB,mBAIRM,EAJQ,KAIAC,EAJA,OAKyBP,mBAAS,CAACV,SAAS,IAL5C,mBAKRkB,EALQ,KAKMC,EALN,KAWVC,EAAgB,mBAAQN,GAAaA,EAAUO,OAAS,GAGxDC,EAAc,WAClBT,EAAW,IACXE,EAAa,KAGTQ,EAAmB,SAACrC,EAAMe,GAC9BkB,EAAgB,2BAAID,GAAL,IAAmBlB,SAAS,EAAMd,KAAMA,EAAMe,QAASA,KACtEuB,YAAW,kBAAML,EAAgB,2BAAID,GAAL,IAAmBlB,SAAS,OAASyB,MAGvEC,qBAAU,WACRC,IACG7D,MAAK,SAAA8D,GAAe,OAAIjB,GAAY,SAAApB,GAAC,OAAIA,EAAEsC,OAAOD,SAClDE,MAAMC,QAAQC,SAChB,IAEH,IAAMC,EAAmB7C,GAAYA,EAAS4B,QAAO,SAAAzB,GAAC,OAAIA,EAAEX,MAAQW,EAAEX,KAAKsD,cAAcC,SAASnB,EAAOkB,kBAAgBE,MAlB9F,SAACC,EAAIC,GAAL,OAAYA,EAAG1D,KAAKsD,cAAgBG,EAAGzD,KAAKsD,cAAgB,GAAK,KAyDtFK,EAAyB,WA5DGnD,EAASoD,MAAK,SAAAC,GAAC,OAAIA,EAAE7D,MAAQ6D,EAAE7D,KAAKsD,gBAAkBtB,EAAQsB,iBA8DzFQ,OAAOC,QAAP,UAAkB/B,EAAlB,iEAjBqB,WAC1B,IAAMgC,EAAkBxD,EAASoD,MAAK,SAAAjD,GAAC,OAAIA,EAAEX,KAAKsD,gBAAkBtB,EAAQsB,iBACzEd,IACDO,EAA4BiB,EAAgB1E,GAAI,CAACU,KAAMgE,EAAgBhE,KAAMC,OAAQiC,IAClFhD,MAAK,SAAAM,GACJuC,EAAYvB,EAAS4B,QAAO,SAAAzB,GAAC,OAAIA,EAAErB,KAAO0E,EAAgB1E,MAAI2D,OAAOzD,IACrEkD,IACAC,EAAiB9B,EAAiBI,QAAlB,gCAAoD+C,EAAgBhE,UAErFkD,OAAM,SAAAe,GAAC,OAAItB,EAAiB9B,EAAiBG,MAAOiD,EAAEC,SAAS9E,KAAKgE,UAEvEe,MAAM,2BAOJC,GA9DyBpC,GAAWA,EAAQS,OAAS,GAgE3BD,IAzC9BO,EAA6B,CAAC/C,KAAMgC,EAAS/B,OAAQiC,IAClDhD,MAAK,SAAAmF,GACJtC,EAAYvB,EAASyC,OAAOoB,IAC5B3B,IACAC,EAAiB9B,EAAiBI,QAAlB,yBAA6CoD,EAAerE,UAE7EkD,OAAM,SAAAe,GAAC,OAAItB,EAAiB9B,EAAiBG,MAAOiD,EAAEC,SAAS9E,KAAKgE,UAsCrEe,MAAM,wFAUV,OACE,gCACE,2CACE,cAAC,EAAD,CAAchD,QAASmB,IACvB,cAAC,EAAD,CAAe3C,MAAOyC,EAAQxC,aART,SAAA0E,GAAK,OAAIjC,EAAUiC,EAAMC,OAAO5E,UASvD,iDACE,cAAC,EAAD,CACEK,KAAMgC,EACN/B,OAAQiC,EACRhC,iBAfiB,SAAAoE,GAAK,OAAIrC,EAAWqC,EAAMC,OAAO5E,QAgBlDQ,mBAfmB,SAAAmE,GAAK,OAAInC,EAAamC,EAAMC,OAAO5E,QAgBtDS,aAbwB,SAAAkE,GAAK,OAAIA,EAAME,kBAAoBb,OAc/D,yCACE,cAAC,EAAD,CAAanD,SAAU6C,EAAkB5C,SAhBnB,SAAAgE,GAAS,OA1Cf,SAAAnF,GACpB,IAAMoF,EAAkBlE,EAASoD,MAAK,SAAAjD,GAAC,OAAIA,EAAErB,KAAOA,KACjDwE,OAAOC,QAAP,iBAAyBW,EAAgB1E,KAAzC,OACD+C,EAA6BzD,GAC1BJ,MAAK,WACJ6C,EAAYvB,EAAS4B,QAAO,SAAAzB,GAAC,OAAIA,EAAErB,KAAOA,MAC1CqD,EAAiB9B,EAAiBI,QAAlB,2BAA+CyD,EAAgB1E,UAEhFkD,OAAM,SAAAe,GAAC,OAAItB,EAAiB9B,EAAiBG,MAAOiD,EAAEC,SAAS9E,KAAKgE,UAkClCuB,CAAcF,UC7E1CG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5F,MAAK,YAAkD,IAA/C6F,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c544688d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url = \"/api/persons\";\r\n\r\nconst createContact = contact => {\r\n    const req = axios.post(url, contact);\r\n    return req.then(res => res.data);\r\n}\r\n\r\nconst getContacts = () => {\r\n    const req = axios.get(url);\r\n    return req.then(res => res.data);\r\n}\r\n\r\nconst deleteContact = id => {\r\n    const req = axios.delete(`${url}/${id}`)\r\n    return req.then(res => res.data);\r\n}\r\n\r\nconst updateNumber = (id, updatedContact) => {\r\n    const req = axios.put(`${url}/${id}`, updatedContact);\r\n    return req.then(res => res.data);\r\n}\r\n\r\nexport default {\r\n    createContact,\r\n    getContacts,\r\n    deleteContact,\r\n    updateNumber\r\n}","export const ContactFilter = ({value, handleChange}) => {\r\n    return (\r\n      <div>\r\n        filter: <input value={value} onChange={handleChange} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\nexport const ContactForm = (props) => {\r\n    const name = props.name;\r\n    const number = props.number;\r\n    const handleNameChange = props.handleNameChange;\r\n    const handleNumberChange = props.handleNumberChange;\r\n    const handleSubmit = props.handleSubmit;\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          name: <input value={name} onChange={handleNameChange} />\r\n        </div>\r\n        <div>\r\n          number: <input value={number} onChange={handleNumberChange} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    );\r\n}\r\n  \r\nexport const ContactList = ({contacts, onDelete}) => {\r\n    return (\r\n      <div>\r\n        {contacts.map(c => {\r\n          return (\r\n            <div key={c.id}>\r\n              <span>{c.name} {c.number}</span>\r\n              <button onClick={() => onDelete(c.id)}>Delete</button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n}\r\n","export const NotificationType = Object.freeze({\r\n    ERROR: 1,\r\n    SUCCESS: 2\r\n  })\r\n  \r\nexport const Notification = ({content}) => {\r\n    const isShown = content.isShown;\r\n    const type = content.type;\r\n    const message = content.message;\r\n  \r\n    if(!isShown) return null;\r\n  \r\n    const isError = () => type === NotificationType.ERROR;\r\n  \r\n    const style = {\r\n      background: isError() ? \"pink\" : \"lightgreen\",\r\n      color: isError() ? \"red\" : \"green\",\r\n      borderColor: isError() ? \"red\" : \"green\",\r\n      border: \"1px solid\",\r\n      padding: \"10px\"\r\n    };\r\n  \r\n    return (\r\n      <div style={style}>\r\n        <p>{message}</p>\r\n      </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport contactService from \"./services/contactService\";\r\nimport {ContactFilter, ContactForm, ContactList} from \"./components/contact\";\r\nimport {NotificationType, Notification} from \"./components/notification\";\r\n\r\nconst App = () => {\r\n  const [ contacts, setContacts] = useState([]);\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('');\r\n  const [ filter, setFilter ] = useState('');\r\n  const [ notification, setNotification] = useState({isShown: false});\r\n\r\n  const NOTIFICATION_DURATION_S = 3;\r\n\r\n  const nameAlreadyExists = () => !!contacts.find(p => p.name && p.name.toLowerCase() === newName.toLowerCase());\r\n  const nameIsProvided = () => !!newName && newName.length > 0;\r\n  const numberIsValid = () => !!newNumber && newNumber.length > 0; \r\n  const sortContactsByName = (c1, c2) => c2.name.toLowerCase() < c1.name.toLowerCase() ? 1 : -1;\r\n\r\n  const clearInputs = () => {\r\n    setNewName(\"\");\r\n    setNewNumber(\"\");\r\n  }\r\n\r\n  const showNotification = (type, message) => {\r\n    setNotification({...notification, isShown: true, type: type, message: message});\r\n    setTimeout(() => setNotification({...notification, isShown: false}), NOTIFICATION_DURATION_S * 1000)\r\n  }\r\n\r\n  useEffect(() => {\r\n    contactService.getContacts()\r\n      .then(fetchedContacts => setContacts(c => c.concat(fetchedContacts)))\r\n      .catch(console.error);\r\n  }, []);\r\n\r\n  const filteredContacts = contacts && contacts.filter(c => c.name && c.name.toLowerCase().includes(filter.toLowerCase())).sort(sortContactsByName);\r\n\r\n  const createContact = () => {\r\n    contactService.createContact({name: newName, number: newNumber})\r\n      .then(createdContact => {\r\n        setContacts(contacts.concat(createdContact))\r\n        clearInputs();\r\n        showNotification(NotificationType.SUCCESS, `Added contact: ${createdContact.name}`);\r\n      })\r\n      .catch(e => showNotification(NotificationType.ERROR, e.response.data.error));\r\n  }\r\n\r\n  const deleteContact = id => {\r\n    const contactToDelete = contacts.find(c => c.id === id);\r\n    if(window.confirm(`Delete ${contactToDelete.name}?`)) {\r\n      contactService.deleteContact(id)\r\n        .then(() => {\r\n          setContacts(contacts.filter(c => c.id !== id));\r\n          showNotification(NotificationType.SUCCESS, `Deleted contact: ${contactToDelete.name}`);\r\n        })\r\n        .catch(e => showNotification(NotificationType.ERROR, e.response.data.error))\r\n    }\r\n  }\r\n\r\n  const updateContactNumber = () => {\r\n    const existingContact = contacts.find(c => c.name.toLowerCase() === newName.toLowerCase());\r\n    if(numberIsValid()) {\r\n      contactService.updateNumber(existingContact.id, {name: existingContact.name, number: newNumber})\r\n        .then(updatedContact => {\r\n          setContacts(contacts.filter(c => c.id !== existingContact.id).concat(updatedContact));\r\n          clearInputs();\r\n          showNotification(NotificationType.SUCCESS, `Updated the number of ${existingContact.name}`);\r\n        })\r\n        .catch(e => showNotification(NotificationType.ERROR, e.response.data.error));\r\n    } else {\r\n      alert(\"Provide a proper number\");\r\n    }\r\n  }\r\n\r\n  const attemptContactCreation = () => {\r\n    if(nameAlreadyExists()) {\r\n      if(window.confirm(`${newName} is already added to the phonebook. Update existing number?`)) {\r\n        updateContactNumber();\r\n      }\r\n    } else if(nameIsProvided() && numberIsValid()) {\r\n      createContact();\r\n    } else {\r\n      alert(\"Please provide both the name and the number. Also, ensure the number is long enough\");\r\n    }\r\n  }\r\n\r\n  const handleNameChange = event => setNewName(event.target.value);\r\n  const handleNumberChange = event => setNewNumber(event.target.value);\r\n  const handleFilterChange = event => setFilter(event.target.value);\r\n  const handleContactDelete = contactId => deleteContact(contactId);\r\n  const handleContactFormSubmit = event => event.preventDefault() || attemptContactCreation();\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n        <Notification content={notification} />\r\n        <ContactFilter value={filter} handleChange={handleFilterChange} />\r\n      <h2>Add new contact</h2>\r\n        <ContactForm \r\n          name={newName} \r\n          number={newNumber} \r\n          handleNameChange={handleNameChange}\r\n          handleNumberChange={handleNumberChange}\r\n          handleSubmit={handleContactFormSubmit} />\r\n      <h2>Numbers</h2>\r\n        <ContactList contacts={filteredContacts} onDelete={handleContactDelete} />\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}